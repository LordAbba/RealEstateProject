// pages/agent/add_property.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';

import '../../Controllers/AuthContoller.dart';
import '../../Models/PropertyModel.dart';
import '../../Services/PropertyService.dart';
import '../../Services/ImageUploadService.dart';
import '../../Themes/AppTheme.dart';

class AddPropertyController extends GetxController {
  final formKey = GlobalKey<FormState>();

  // Form controllers
  final titleController = TextEditingController();
  final descriptionController = TextEditingController();
  final priceController = TextEditingController();
  final locationController = TextEditingController();
  final bedroomsController = TextEditingController();
  final bathroomsController = TextEditingController();

  // Observable variables
  var isLoading = false.obs;
  var selectedImages = <File>[].obs;
  var imageUrls = <String>[].obs;
  var amenities = <String>[].obs;
  var newAmenity = ''.obs;

  // Predefined amenities
  final availableAmenities = [
    'Air Conditioning',
    'WiFi',
    'Parking',
    'Swimming Pool',
    'Gym',
    'Security',
    'Generator',
    'Elevator',
    'Balcony',
    'Garden',
    'Laundry',
    'Furnished',
    'Kitchen Appliances',
    'Water Heater',
    'CCTV',
    'Playground',
    'Shopping Mall Nearby',
    'Hospital Nearby',
    'School Nearby',
    'Public Transport'
  ].obs;

  final PropertyService _propertyService = Get.find<PropertyService>();
  final ImageUploadService _imageUploadService = Get.find<ImageUploadService>();
  final ImagePicker _picker = ImagePicker();

  @override
  void onClose() {
    titleController.dispose();
    descriptionController.dispose();
    priceController.dispose();
    locationController.dispose();
    bedroomsController.dispose();
    bathroomsController.dispose();
    super.onClose();
  }

  Future<void> pickImages() async {
    try {
      final List<XFile> images = await _picker.pickMultiImage();

      if (images.isNotEmpty) {
        // Limit to 10 images maximum
        final imagesToAdd = images.take(10 - selectedImages.length).toList();

        for (var image in imagesToAdd) {
          selectedImages.add(File(image.path));
        }

        if (images.length > imagesToAdd.length) {
          Get.snackbar(
            'Info',
            'Maximum 10 images allowed. Some images were not added.',
            backgroundColor: AppColors.warning,
            colorText: Colors.white,
          );
        }
      }
    } catch (e) {
      Get.snackbar(
        'Error',
        'Failed to pick images: ${e.toString()}',
        backgroundColor: AppColors.error,
        colorText: Colors.white,
      );
    }
  }

  void removeImage(int index) {
    selectedImages.removeAt(index);
  }

  void addAmenity(String amenity) {
    if (amenity.isNotEmpty && !amenities.contains(amenity)) {
      amenities.add(amenity);
    }
  }

  void removeAmenity(String amenity) {
    amenities.remove(amenity);
  }

  void addCustomAmenity() {
    if (newAmenity.value.isNotEmpty && !amenities.contains(newAmenity.value)) {
      amenities.add(newAmenity.value);
      newAmenity.value = '';
    }
  }

  Future<void> submitProperty() async {
    if (!formKey.currentState!.validate()) {
      return;
    }

    if (selectedImages.isEmpty) {
      Get.snackbar(
        'Error',
        'Please select at least one image',
        backgroundColor: AppColors.error,
        colorText: Colors.white,
      );
      return;
    }

    try {
      isLoading.value = true;

      // Upload images
      List<String> uploadedImageUrls = [];
      for (File image in selectedImages) {
        final url = await _imageUploadService.uploadPropertyImage(image);
        uploadedImageUrls.add(url);
      }

      // Get current user
      final currentUser = Get.find<AuthController>().currentUser.value;
      if (currentUser == null) {
        throw Exception('User not authenticated');
      }

      // Create property model
      final property = PropertyModel(
        id: '', // Will be generated by database
        title: titleController.text.trim(),
        description: descriptionController.text.trim(),
        price: double.parse(priceController.text.trim()),
        location: locationController.text.trim(),
        bedrooms: int.parse(bedroomsController.text.trim()),
        bathrooms: int.parse(bathroomsController.text.trim()),
        amenities: amenities.toList(),
        images: uploadedImageUrls,
        agentId: currentUser.role.toString().contains('agent') ? currentUser.id : null,
        landlordId: currentUser.role.toString().contains('landlord') ? currentUser.id : null,
        status: 'pending', // Properties start as pending approval
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // Submit to database
      await _propertyService.addProperty(property);

      Get.snackbar(
        'Success',
        'Property added successfully! It will be reviewed before being published.',
        backgroundColor: AppColors.success,
        colorText: Colors.white,
      );

      // Navigate back to properties list
      Get.back();

    } catch (e) {
      Get.snackbar(
        'Error',
        'Failed to add property: ${e.toString()}',
        backgroundColor: AppColors.error,
        colorText: Colors.white,
      );
    } finally {
      isLoading.value = false;
    }
  }
}

class AddPropertyPage extends StatelessWidget {
  final AddPropertyController controller = Get.put(AddPropertyController());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.backgroundColor,
      appBar: AppBar(
        title: Text('Add New Property', style: AppTextStyles.cardTitle),
        elevation: 0,
      ),
      body: Form(
        key: controller.formKey,
        child: SingleChildScrollView(
          padding: EdgeInsets.all(AppTheme.spacingLg),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildBasicInfoSection(),
              SizedBox(height: AppTheme.spacingXl),
              _buildLocationSection(),
              SizedBox(height: AppTheme.spacingXl),
              _buildPropertyDetailsSection(),
              SizedBox(height: AppTheme.spacingXl),
              _buildImagesSection(),
              SizedBox(height: AppTheme.spacingXl),
              _buildAmenitiesSection(),
              SizedBox(height: AppTheme.spacingXl),
              _buildSubmitButton(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildBasicInfoSection() {
    return _buildSection(
      title: 'Basic Information',
      child: Column(
        children: [
          TextFormField(
            controller: controller.titleController,
            decoration: InputDecoration(
              labelText: 'Property Title',
              hintText: 'e.g., Modern 3BR Apartment',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(AppTheme.radiusMd),
              ),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter property title';
              }
              return null;
            },
          ),
          SizedBox(height: AppTheme.spacingMd),

          TextFormField(
            controller: controller.descriptionController,
            maxLines: 4,
            decoration: InputDecoration(
              labelText: 'Description',
              hintText: 'Describe the property features, location benefits, etc.',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(AppTheme.radiusMd),
              ),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter property description';
              }
              return null;
            },
          ),
          SizedBox(height: AppTheme.spacingMd),

          TextFormField(
            controller: controller.priceController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              labelText: 'Monthly Rent (₦)',
              hintText: 'e.g., 450000',
              prefixText: '₦ ',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(AppTheme.radiusMd),
              ),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter rent amount';
              }
              final price = double.tryParse(value);
              if (price == null || price <= 0) {
                return 'Please enter a valid price';
              }
              return null;
            },
          ),
        ],
      ),
    );
  }

  Widget _buildLocationSection() {
    return _buildSection(
      title: 'Location',
      child: Column(
        children: [
          TextFormField(
            controller: controller.locationController,
            decoration: InputDecoration(
              labelText: 'Full Address',
              hintText: 'e.g., Victoria Island, Lagos State',
              prefixIcon: Icon(Icons.location_on),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(AppTheme.radiusMd),
              ),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter property location';
              }
              return null;
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPropertyDetailsSection() {
    return _buildSection(
      title: 'Property Details',
      child: Row(
        children: [
          Expanded(
            child: TextFormField(
              controller: controller.bedroomsController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'Bedrooms',
                prefixIcon: Icon(Icons.bed),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(AppTheme.radiusMd),
                ),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Required';
                }
                final bedrooms = int.tryParse(value);
                if (bedrooms == null || bedrooms < 0) {
                  return 'Invalid';
                }
                return null;
              },
            ),
          ),
          SizedBox(width: AppTheme.spacingMd),

          Expanded(
            child: TextFormField(
              controller: controller.bathroomsController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: 'Bathrooms',
                prefixIcon: Icon(Icons.bathtub),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(AppTheme.radiusMd),
                ),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Required';
                }
                final bathrooms = int.tryParse(value);
                if (bathrooms == null || bathrooms < 0) {
                  return 'Invalid';
                }
                return null;
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildImagesSection() {
    return _buildSection(
      title: 'Property Images',
      subtitle: 'Add up to 10 high-quality images',
      child: Column(
        children: [
          // Image picker button
          GestureDetector(
            onTap: controller.pickImages,
            child: Container(
              width: double.infinity,
              height: 120,
              decoration: BoxDecoration(
                border: Border.all(
                  color: AppTheme.primaryColor,
                  style: BorderStyle.solid,
                  width: 2,
                ),
                borderRadius: BorderRadius.circular(AppTheme.radiusMd),
                color: AppTheme.primaryColor.withOpacity(0.05),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.add_photo_alternate,
                    size: 48,
                    color: AppTheme.primaryColor,
                  ),
                  SizedBox(height: AppTheme.spacingSm),
                  Text(
                    'Tap to select images',
                    style: TextStyle(
                      color: AppTheme.primaryColor,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
            ),
          ),

          SizedBox(height: AppTheme.spacingMd),

          // Selected images grid
          Obx(() {
            if (controller.selectedImages.isEmpty) {
              return Container();
            }

            return GridView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: AppTheme.spacingSm,
                mainAxisSpacing: AppTheme.spacingSm,
                childAspectRatio: 1,
              ),
              itemCount: controller.selectedImages.length,
              itemBuilder: (context, index) {
                return Stack(
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(AppTheme.radiusSm),
                        image: DecorationImage(
                          image: FileImage(controller.selectedImages[index]),
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                    Positioned(
                      top: 4,
                      right: 4,
                      child: GestureDetector(
                        onTap: () => controller.removeImage(index),
                        child: Container(
                          padding: EdgeInsets.all(4),
                          decoration: BoxDecoration(
                            color: Colors.red,
                            borderRadius: BorderRadius.circular(AppTheme.radiusRound),
                          ),
                          child: Icon(
                            Icons.close,
                            size: 16,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ],
                );
              },
            );
          }),
        ],
      ),
    );
  }

  Widget _buildAmenitiesSection() {
    return _buildSection(
      title: 'Amenities',
      subtitle: 'Select available amenities',
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Available amenities chips
          Obx(() => Wrap(
            spacing: AppTheme.spacingSm,
            runSpacing: AppTheme.spacingSm,
            children: controller.availableAmenities.map((amenity) {
              final isSelected = controller.amenities.contains(amenity);
              return FilterChip(
                label: Text(amenity),
                selected: isSelected,
                onSelected: (selected) {
                  if (selected) {
                    controller.addAmenity(amenity);
                  } else {
                    controller.removeAmenity(amenity);
                  }
                },
                selectedColor: AppTheme.primaryColor.withOpacity(0.2),
                checkmarkColor: AppTheme.primaryColor,
              );
            }).toList(),
          )),

          SizedBox(height: AppTheme.spacingMd),

          // Custom amenity input
          Row(
            children: [
              Expanded(
                child: TextField(
                  onChanged: (value) => controller.newAmenity.value = value,
                  decoration: InputDecoration(
                    labelText: 'Add custom amenity',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppTheme.radiusMd),
                    ),
                  ),
                ),
              ),
              SizedBox(width: AppTheme.spacingMd),
              ElevatedButton(
                onPressed: controller.addCustomAmenity,
                child: Text('Add'),
              ),
            ],
          ),

          SizedBox(height: AppTheme.spacingMd),

          // Selected amenities
          Obx(() {
            if (controller.amenities.isEmpty) {
              return Text(
                'No amenities selected',
                style: AppTextStyles.caption,
              );
            }

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Selected Amenities:', style: AppTextStyles.cardSubtitle),
                SizedBox(height: AppTheme.spacingSm),
                Wrap(
                  spacing: AppTheme.spacingSm,
                  runSpacing: AppTheme.spacingSm,
                  children: controller.amenities.map((amenity) {
                    return Chip(
                      label: Text(amenity),
                      onDeleted: () => controller.removeAmenity(amenity),
                      deleteIconColor: Colors.red,
                    );
                  }).toList(),
                ),
              ],
            );
          }),
        ],
      ),
    );
  }

  Widget _buildSubmitButton() {
    return Obx(() => SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: controller.isLoading.value ? null : controller.submitProperty,
        style: ElevatedButton.styleFrom(
          backgroundColor: AppTheme.primaryColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(AppTheme.radiusMd),
          ),
        ),
        child: controller.isLoading.value
            ? Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(
              width: 20,
              height: 20,
              child: CircularProgressIndicator(
                color: Colors.white,
                strokeWidth: 2,
              ),
            ),
            SizedBox(width: AppTheme.spacingMd),
            Text(
              'Adding Property...',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        )
            : Text(
          'Add Property',
          style: TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    ));
  }

  Widget _buildSection({
    required String title,
    String? subtitle,
    required Widget child,
  }) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(AppTheme.spacingLg),
      decoration: AppDecorations.cardDecoration,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(title, style: AppTextStyles.cardTitle),
          if (subtitle != null) ...[
            SizedBox(height: 4),
            Text(subtitle, style: AppTextStyles.caption),
          ],
          SizedBox(height: AppTheme.spacingMd),
          child,
        ],
      ),
    );
  }
}